class ComplianceRecord:
    def _init_(self, record_id, details, purpose, country):
        self.record_id = record_id
        self.details = details
        self.purpose = purpose
        self.country = country
        self.isPermissionGranted = False

class ImmigrationComplianceSystem:
    def _init_(self):
        self.file_path = "fileDataStore.txt"
        self.records = self.load_records()
        self.record_counter = len(self.records)

    def load_records(self):
        try:
            with open(self.file_path, "r") as file:
                records = {}
                lines = file.readlines()
                for line in lines:
                    record_data = eval(line)
                    records[record_data['record_id']] = record_data
                return records
        except FileNotFoundError:
            return {}

    def save_records(self):
        with open(self.file_path, "w") as file:
            for record_id, record in self.records.items():
                file.write(str(record) + '\n')

    def is_record_present_in_database(self, record_id):
        return self.records.get(record_id, None)

    def add_record(self, name, purpose, country):
        self.record_counter += 1
        record_id = self.record_counter
        is_permission_granted = purpose.lower() in ["job", "tourism", "study"]
        record = ComplianceRecord(record_id, name, purpose, country)
        record.isPermissionGranted = is_permission_granted
        self.records[record_id] = record._dict_
        self.save_records()
        print("Compliance record added successfully.")

    def update_record(self, record_id, new_details):
        record = self.is_record_present_in_database(record_id)
        if record:
            record["details"] = new_details
            self.save_records()
            print("Compliance record updated successfully.")
        else:
            print("Record ID not found.")

    def delete_record(self, record_id):
        if record_id in self.records:
            del self.records[record_id]
            self.save_records()
            print("Compliance record deleted successfully.")
        else:
            print("Record ID not found.")

    def ensure_immigration_compliance(self, case_id):
        record = self.is_record_present_in_database(case_id)
        if record and record["purpose"].lower() in ["job", "study", "tourism"]:
            record["isPermissionGranted"] = True
            self.save_records()
            print("Compliance ensured.")
        else:
            print("Compliance could not be ensured. Invalid purpose or record ID.")

    def audit_compliance_records(self, record_id):
        record = self.is_record_present_in_database(record_id)
        if record:
            print(f"Record ID: {record['record_id']}, Details: {record['details']}, Purpose: {record['purpose']}, Country: {record['country']}, Permission Granted: {record['isPermissionGranted']}")
        else:
            print("Record ID not found.")
    
    def display_records(self):
        if self.records:
            print("\nCompliance Records:")
            for record_id, record in self.records.items():
                print(f"Record ID: {record['record_id']}, Details: {record['details']}, Purpose: {record['purpose']}, Country: {record['country']}, Permission Granted: {record['isPermissionGranted']}")
        else:
            print("No records found.")

def main():
    system = ImmigrationComplianceSystem()

    while True:
        print("\nImmigration Compliance System")
        print("1. Add Compliance Record")
        print("2. Update Compliance Record")
        print("3. Delete Compliance Record")
        print("4. Ensure Immigration Compliance")
        print("5. Audit Compliance Records")
        print("6. Display Compliance Records")
        print("7. Exit")

        choice = input("Enter your choice: ").strip()

        if choice == '1':
            name = input("Enter name for the new record: ")
            purpose = input("Enter purpose [Job/Tourism/Study]: ").strip().lower()
            country = input("Enter country: ").strip()
            system.add_record(name, purpose, country)
        elif choice == '2':
            record_id = input("Enter record ID to update: ").strip()
            if record_id.isdigit():
                record_id = int(record_id)
                new_details = input("Enter new details: ")
                system.update_record(record_id, new_details)
            else:
                print("Invalid record ID.")

        elif choice == '3':
            record_id = input("Enter record ID to delete: ").strip()
            if record_id.isdigit():
                record_id = int(record_id)
                system.delete_record(record_id)
            else:
                print("Invalid record ID.")
        elif choice == '4':
            case_id = input("Enter case ID to ensure compliance: ").strip()
            if case_id.isdigit():
                case_id = int(case_id)
                system.ensure_immigration_compliance(case_id)
            else:
                print("Invalid case ID.")
        elif choice == '5':
            record_id = input("Enter record ID to audit: ").strip()
            if record_id.isdigit():
                record_id = int(record_id)
                system.audit_compliance_records(record_id)
            else:
                print("Invalid record ID.")
        elif choice == '6':
            system.display_records()
        elif choice == '7':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number from 1 to 7.")

if _name_ == "_main_":
    main()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, f1_score, recall_score

# Set seaborn style
sns.set()

# Load data
df = pd.read_csv('creditcard.csv')

# Check if 'Class' column exists
if 'Class' in df.columns:
    # Map class names to labels where 0 represent Not Fraud and 1 represent Fraud
    class_names = {0:'Not Fraud', 1:'Fraud'}
    print(df['Class'].value_counts().rename(index = class_names))
else:
    print("The column 'Class' does not exist in the DataFrame.")

# Create subplots
fig = plt.figure(figsize = (15, 12))

v1 = plt.subplot(5, 6, 1) ; plt.plot(df.V1) ; 
v1.title.set_text('V1')

plt.subplot(5, 6, 15) ; plt.plot(df.V15)
plt.subplot(5, 6, 2) ; plt.plot(df.V2) ; plt.subplot(5, 6, 16) ; plt.plot(df.V16)
plt.subplot(5, 6, 3) ; plt.plot(df.V3) ; plt.subplot(5, 6, 17) ; plt.plot(df.V17)
plt.subplot(5, 6, 4) ; plt.plot(df.V4) ; plt.subplot(5, 6, 18) ; plt.plot(df.V18)
plt.subplot(5, 6, 5) ; plt.plot(df.V5) ; plt.subplot(5, 6, 19) ; plt.plot(df.V19)
plt.subplot(5, 6, 6) ; plt.plot(df.V6) ; plt.subplot(5, 6, 20) ; plt.plot(df.V20)
plt.subplot(5, 6, 7) ; plt.plot(df.V7) ; plt.subplot(5, 6, 21) ; plt.plot(df.V21)
plt.subplot(5, 6, 8) ; plt.plot(df.V8) ; plt.subplot(5, 6, 22) ; plt.plot(df.V22)
plt.subplot(5, 6, 9) ; plt.plot(df.V9) ; plt.subplot(5, 6, 23) ; plt.plot(df.V23)
plt.subplot(5, 6, 10) ; plt.plot(df.V10) ; plt.subplot(5, 6, 24) ; plt.plot(df.V24)
plt.subplot(5, 6, 11) ; plt.plot(df.V11) ; plt.subplot(5, 6, 25) ; plt.plot(df.V25)
plt.subplot(5, 6, 12) ; plt.plot(df.V12) ; plt.subplot(5, 6, 26) ; plt.plot(df.V26)
plt.subplot(5, 6, 13) ; plt.plot(df.V13) ; plt.subplot(5, 6, 27) ; plt.plot(df.V27)
plt.subplot(5, 6, 14) ; plt.plot(df.V14) ; plt.subplot(5, 6, 28) ; plt.plot(df.V28)
plt.subplot(5, 6, 29) ; plt.plot(df.Amount)
plt.show()

# Split data into features and target
feature_names = df.iloc[:, 1:30].columns
target = df.iloc[:, 30].name
print('features: ')
print(feature_names)
print('target: ')
print(target)
data_features = df[feature_names]
data_target = df[target]
print()
print()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data_features, data_target, train_size=0.70, test_size=0.30, random_state=1)

# Print lengths of training and testing sets
print("Length of X_train is: {X_train}".format(X_train = len(X_train)))
print("Length of X_test is: {X_test}".format(X_test = len(X_test)))
print("Length of y_train is: {y_train}".format(y_train = len(y_train)))
print("Length of y_test is: {y_test}".format(y_test = len(y_test)))

# Create logistic regression model
model = LogisticRegression(max_iter=500000)

# Train model
model.fit(X_train, y_train)

# Make predictions
pred = model.predict(X_test)

# Create confusion matrix
class_names = ['Not Fraud', 'Fraud']
matrix = confusion_matrix(y_test, pred)

# Create pandas dataframe
dataframe = pd.DataFrame(matrix, index=class_names, columns=class_names)
dataframe.style.background_gradient(cmap='Blues')

# setting the parameter values for heatmap
cmap = "tab20"
center = 0

print()
print()

print("TEST DATA USED:: {X_test}".format(X_test = len(X_test)))
print('############################# HEAT MAP #################################')
# Create heatmap
sns.heatmap(dataframe, annot=True, center=center, cmap=cmap,  fmt=".2f", square=True, linewidths=.5)
plt.show()

print()
print()
print('############################# BAR PLOT #################################')
sns.barplot(x='Not Fraud', y='Fraud', data=dataframe,  hue="Fraud" ,palette ='magma')
plt.show()
